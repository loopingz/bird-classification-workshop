{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms",
                "cloudwatch:DescribeAlarmHistory",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DescribeAlarmsForMetric",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics",
                "cloudwatch:PutMetricAlarm",
                "dynamodb:*",
                "sns:CreateTopic",
                "sns:DeleteTopic",
                "sns:ListSubscriptions",
                "sns:ListSubscriptionsByTopic",
                "sns:ListTopics",
                "sns:Subscribe",
                "sns:Unsubscribe",
                "sns:SetTopicAttributes"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "DDBConsole"
        },
        {
            "Action": [
                "lambda:*",
                "iam:ListRoles"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "DDBConsoleTriggers"
        },
        {
            "Action": [
                "datapipeline:*",
                "iam:ListRoles"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "DDBConsoleImportExport"
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:GetRolePolicy",
                "iam:PassRole"
            ],
            "Resource": [
                "*"
            ],
            "Sid": "IAMEDPRoles"
        },
        {
            "Action": [
                "ec2:CreateTags",
                "ec2:DescribeInstances",
                "ec2:RunInstances",
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances",
                "elasticmapreduce:*",
                "datapipeline:*"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "EMR"
        },
        {
            "Action": [
                "s3:DeleteObject",
                "s3:Get*",
                "s3:List*",
                "s3:Put*"
            ],
            "Effect": "Allow",
            "Resource": [
                "*"
            ],
            "Sid": "S3"
        },
        {
            "Action": [
                "dynamodb:*",
                "dax:*",
                "application-autoscaling:DeleteScalingPolicy",
                "application-autoscaling:DeregisterScalableTarget",
                "application-autoscaling:DescribeScalableTargets",
                "application-autoscaling:DescribeScalingActivities",
                "application-autoscaling:DescribeScalingPolicies",
                "application-autoscaling:PutScalingPolicy",
                "application-autoscaling:RegisterScalableTarget",
                "cloudwatch:DeleteAlarms",
                "cloudwatch:DescribeAlarmHistory",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DescribeAlarmsForMetric",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics",
                "cloudwatch:PutMetricAlarm",
                "datapipeline:ActivatePipeline",
                "datapipeline:CreatePipeline",
                "datapipeline:DeletePipeline",
                "datapipeline:DescribeObjects",
                "datapipeline:DescribePipelines",
                "datapipeline:GetPipelineDefinition",
                "datapipeline:ListPipelines",
                "datapipeline:PutPipelineDefinition",
                "datapipeline:QueryObjects",
                "ec2:DescribeVpcs",
                "ec2:DescribeSubnets",
                "ec2:DescribeSecurityGroups",
                "iam:GetRole",
                "iam:ListRoles",
                "sns:CreateTopic",
                "sns:DeleteTopic",
                "sns:ListSubscriptions",
                "sns:ListSubscriptionsByTopic",
                "sns:ListTopics",
                "sns:Subscribe",
                "sns:Unsubscribe",
                "sns:SetTopicAttributes",
                "lambda:CreateFunction",
                "lambda:ListFunctions",
                "lambda:ListEventSourceMappings",
                "lambda:CreateEventSourceMapping",
                "lambda:DeleteEventSourceMapping",
                "lambda:GetFunctionConfiguration",
                "lambda:DeleteFunction"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "DDB1"
        },
        {
            "Action": [
                "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com",
                        "dax.amazonaws.com"
                    ]
                }
            },
            "Sid": "DDB2"
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "replication.dynamodb.amazonaws.com",
                        "dax.amazonaws.com",
                        "dynamodb.application-autoscaling.amazonaws.com"
                    ]
                }
            },
            "Sid": "DDB3"
        },
        {
            "Sid": "AllowGreengrassAccess",
            "Effect": "Allow",
            "Action": "greengrass:*",
            "Resource": "*"
        },
        {
            "Sid": "AllowIotConsoleAccess",
            "Effect": "Allow",
            "Action": "iot:*",
            "Resource": "*"
        },
        {
            "Sid": "AWSLambdaFullAccess",
            "Effect": "Allow",
            "Action": [
                "cloudformation:DescribeChangeSet",
                "cloudformation:DescribeStackResources",
                "cloudformation:DescribeStacks",
                "cloudformation:GetTemplate",
                "cloudformation:ListStackResources",
                "cloudwatch:*",
                "cognito-identity:ListIdentityPools",
                "cognito-sync:GetCognitoEvents",
                "cognito-sync:SetCognitoEvents",
                "dynamodb:*",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "events:*",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "iam:PassRole",
                "iot:AttachPrincipalPolicy",
                "iot:AttachThingPrincipal",
                "iot:CreateKeysAndCertificate",
                "iot:CreatePolicy",
                "iot:CreateThing",
                "iot:CreateTopicRule",
                "iot:DescribeEndpoint",
                "iot:GetTopicRule",
                "iot:ListPolicies",
                "iot:ListThings",
                "iot:ListTopicRules",
                "iot:ReplaceTopicRule",
                "kinesis:DescribeStream",
                "kinesis:ListStreams",
                "kinesis:PutRecord",
                "kms:ListAliases",
                "lambda:*",
                "logs:*",
                "s3:*",
                "sns:ListSubscriptions",
                "sns:ListSubscriptionsByTopic",
                "sns:ListTopics",
                "sns:Publish",
                "sns:Subscribe",
                "sns:Unsubscribe",
                "sqs:ListQueues",
                "sqs:SendMessage",
                "tag:GetResources",
                "xray:PutTelemetryRecords",
                "xray:PutTraceSegments"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AmazonS3FullAccess",
            "Effect": "Allow",
            "Action": "s3:*",
            "Resource": "*"
        },
        {
            "Sid": "CloudWatchFullAccess1",
            "Action": [
                "autoscaling:Describe*",
                "cloudwatch:*",
                "logs:*",
                "sns:*",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole"
            ],
            "Effect": "Allow",
            "Resource": "*"
        },
        {
            "Sid": "CloudWatchFullAccess2",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "events.amazonaws.com"
                }
              }
        },
        {
            "Sid": "DeepLensIoTThingAccess",
            "Effect": "Allow",
            "Action": [
                "iot:CreateThing",
                "iot:DeleteThing",
                "iot:DeleteThingShadow",
                "iot:DescribeThing",
                "iot:GetThingShadow",
                "iot:UpdateThing",
                "iot:UpdateThingShadow"
            ],
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ]
        },
        {
            "Sid": "DeepLensIoTCertificateAccess",
            "Effect": "Allow",
            "Action": [
                "iot:AttachThingPrincipal",
                "iot:DetachThingPrincipal",
                "iot:UpdateCertificate",
                "iot:DeleteCertificate",
                "iot:DetachPrincipalPolicy"
            ],
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*",
                "arn:aws:iot:*:*:cert/*"
            ]
        },
        {
            "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess",
            "Effect": "Allow",
            "Action": [
                "iot:CreateKeysAndCertificate",
                "iot:CreatePolicy",
                "iot:CreatePolicyVersion"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Sid": "DeepLensIoTAttachCertificatePolicyAccess",
            "Effect": "Allow",
            "Action": [
                "iot:AttachPrincipalPolicy"
            ],
            "Resource": [
                "arn:aws:iot:*:*:policy/deeplens*",
                "arn:aws:iot:*:*:cert/*"
            ]
        },
        {
            "Sid": "DeepLensIoTDataAccess",
            "Effect": "Allow",
            "Action": [
                "iot:GetThingShadow",
                "iot:UpdateThingShadow"
            ],
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ]
        },
        {
            "Sid": "DeepLensIoTEndpointAccess",
            "Effect": "Allow",
            "Action": [
                "iot:DescribeEndpoint"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Sid": "DeepLensS3ObjectAccess",
            "Effect": "Allow",
            "Action": [
                "s3:GetObject"
            ],
            "Resource": [
                "arn:aws:s3:::deeplens*"
            ]
        },
        {
            "Sid": "DeepLensS3Buckets",
            "Effect": "Allow",
            "Action": [
                "s3:DeleteBucket",
                "s3:ListBucket"
            ],
            "Resource": [
                "arn:aws:s3:::deeplens*"
            ]
        },
        {
            "Sid": "DeepLensCreateS3Buckets",
            "Effect": "Allow",
            "Action": [
                "s3:CreateBucket"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Sid": "DeepLensIAMPassRoleAccess",
            "Effect": "Allow",
            "Action": [
                "iam:PassRole"
            ],
            "Resource": [
                "*"
            ],
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "greengrass.amazonaws.com",
                        "sagemaker.amazonaws.com"
                    ]
                }
            }
        },
        {
            "Sid": "DeepLensIAMLambdaPassRoleAccess",
            "Effect": "Allow",
            "Action": [
                "iam:PassRole"
            ],
            "Resource": [
                "arn:aws:iam::*:role/AWSDeepLens*",
                "arn:aws:iam::*:role/service-role/AWSDeepLens*"
            ],
            "Condition": {
                "StringEqualsIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }
        },
        {
            "Sid": "DeepLensGreenGrassAccess",
            "Effect": "Allow",
            "Action": [
                "greengrass:AssociateRoleToGroup",
                "greengrass:AssociateServiceRoleToAccount",
                "greengrass:CreateResourceDefinition",
                "greengrass:CreateResourceDefinitionVersion",
                "greengrass:CreateCoreDefinition",
                "greengrass:CreateCoreDefinitionVersion",
                "greengrass:CreateDeployment",
                "greengrass:CreateFunctionDefinition",
                "greengrass:CreateFunctionDefinitionVersion",
                "greengrass:CreateGroup",
                "greengrass:CreateGroupCertificateAuthority",
                "greengrass:CreateGroupVersion",
                "greengrass:CreateLoggerDefinition",
                "greengrass:CreateLoggerDefinitionVersion",
                "greengrass:CreateSubscriptionDefinition",
                "greengrass:CreateSubscriptionDefinitionVersion",
                "greengrass:DeleteCoreDefinition",
                "greengrass:DeleteFunctionDefinition",
                "greengrass:DeleteGroup",
                "greengrass:DeleteLoggerDefinition",
                "greengrass:DeleteSubscriptionDefinition",
                "greengrass:DisassociateRoleFromGroup",
                "greengrass:DisassociateServiceRoleFromAccount",
                "greengrass:GetAssociatedRole",
                "greengrass:GetConnectivityInfo",
                "greengrass:GetCoreDefinition",
                "greengrass:GetCoreDefinitionVersion",
                "greengrass:GetDeploymentStatus",
                "greengrass:GetDeviceDefinition",
                "greengrass:GetDeviceDefinitionVersion",
                "greengrass:GetFunctionDefinition",
                "greengrass:GetFunctionDefinitionVersion",
                "greengrass:GetGroup",
                "greengrass:GetGroupCertificateAuthority",
                "greengrass:GetGroupCertificateConfiguration",
                "greengrass:GetGroupVersion",
                "greengrass:GetLoggerDefinition",
                "greengrass:GetLoggerDefinitionVersion",
                "greengrass:GetResourceDefinition",
                "greengrass:GetServiceRoleForAccount",
                "greengrass:GetSubscriptionDefinition",
                "greengrass:GetSubscriptionDefinitionVersion",
                "greengrass:ListCoreDefinitionVersions",
                "greengrass:ListCoreDefinitions",
                "greengrass:ListDeployments",
                "greengrass:ListDeviceDefinitionVersions",
                "greengrass:ListDeviceDefinitions",
                "greengrass:ListFunctionDefinitionVersions",
                "greengrass:ListFunctionDefinitions",
                "greengrass:ListGroupCertificateAuthorities",
                "greengrass:ListGroupVersions",
                "greengrass:ListGroups",
                "greengrass:ListLoggerDefinitionVersions",
                "greengrass:ListLoggerDefinitions",
                "greengrass:ListSubscriptionDefinitionVersions",
                "greengrass:ListSubscriptionDefinitions",
                "greengrass:ResetDeployments",
                "greengrass:UpdateConnectivityInfo",
                "greengrass:UpdateCoreDefinition",
                "greengrass:UpdateDeviceDefinition",
                "greengrass:UpdateFunctionDefinition",
                "greengrass:UpdateGroup",
                "greengrass:UpdateGroupCertificateConfiguration",
                "greengrass:UpdateLoggerDefinition",
                "greengrass:UpdateSubscriptionDefinition",
                "greengrass:UpdateResourceDefinition"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Sid": "DeepLensLambdaAdminFunctionAccess",
            "Effect": "Allow",
            "Action": [
                "lambda:CreateFunction",
                "lambda:DeleteFunction",
                "lambda:GetFunction",
                "lambda:GetFunctionConfiguration",
                "lambda:ListFunctions",
                "lambda:ListVersionsByFunction",
                "lambda:PublishVersion",
                "lambda:UpdateFunctionCode",
                "lambda:UpdateFunctionConfiguration"
            ],
            "Resource": [
                "arn:aws:lambda:*:*:function:deeplens*"
            ]
        },
        {
            "Sid": "DeepLensLambdaUsersFunctionAccess",
            "Effect": "Allow",
            "Action": [
                "lambda:GetFunction",
                "lambda:GetFunctionConfiguration",
                "lambda:ListFunctions",
                "lambda:ListVersionsByFunction"
            ],
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ]
        },
        {
            "Sid": "DeepLensSageMakerWriteAccess",
            "Effect": "Allow",
            "Action": [
                "sagemaker:CreateTrainingJob",
                "sagemaker:DescribeTrainingJob",
                "sagemaker:StopTrainingJob"
            ],
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/deeplens*"
            ]
        },
        {
            "Sid": "DeepLensSageMakerReadAccess",
            "Effect": "Allow",
            "Action": [
                "sagemaker:DescribeTrainingJob"
            ],
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/*"
            ]
        },
        {
            "Sid": "DeepLensGreenGrassCloudWatchAccess",
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*"
        },
        {
            "Sid": "DeepLensAccess",
            "Effect": "Allow",
            "Action": "deeplens:*",
            "Resource": "*"
        },
        {
            "Sid": "DeepLensKinesisVideoAccess",
            "Effect": "Allow",
            "Action": [
                "kinesisvideo:DescribeStream",
                "kinesisvideo:CreateStream",
                "kinesisvideo:GetDataEndpoint",
                "kinesisvideo:PutMedia"
            ],
            "Resource": "*"
        },
        {
            "Sid": "DeepLensRoles",
            "Effect": "Allow",
            "Action": [
                "iam:CreateRole",
                "iam:CreatePolicy",
                "iam:ListPolicies",
                "iam:AttachRolePolicy",
                "iam:DetachRolePolicy",
                "iam:DeleteRole"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AmazonSNSFullAccess",
            "Action": "sns:*",
            "Effect": "Allow",
            "Resource": "*"
        },
        {
            "Sid": "AmazonSageMakerFullAccess1",
            "Effect": "Allow",
            "Action": "sagemaker:*",
            "Resource": "*"
        },
        {
            "Sid": "AmazonSageMakerFullAccess2",
            "Effect": "Allow",
            "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "cloudwatch:PutMetricData",
                "cloudwatch:PutMetricAlarm",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DeleteAlarms",
                "ec2:CreateNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:DeleteNetworkInterface",
                "ec2:DeleteNetworkInterfacePermission",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeVpcs",
                "ec2:DescribeDhcpOptions",
                "ec2:DescribeSubnets",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeVpcEndpoints",
                "application-autoscaling:DeleteScalingPolicy",
                "application-autoscaling:DeleteScheduledAction",
                "application-autoscaling:DeregisterScalableTarget",
                "application-autoscaling:DescribeScalableTargets",
                "application-autoscaling:DescribeScalingActivities",
                "application-autoscaling:DescribeScalingPolicies",
                "application-autoscaling:DescribeScheduledActions",
                "application-autoscaling:PutScalingPolicy",
                "application-autoscaling:PutScheduledAction",
                "application-autoscaling:RegisterScalableTarget",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:PutLogEvents"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AmazonSageMakerFullAccess3",
            "Effect": "Allow",
            "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject"
            ],
            "Resource": [
                "arn:aws:s3:::*SageMaker*",
                "arn:aws:s3:::*Sagemaker*",
                "arn:aws:s3:::*SageMaker*"
            ]
        },
        {
            "Sid": "AmazonSageMakerFullAccess4",
            "Effect": "Allow",
            "Action": [
                "s3:CreateBucket",
                "s3:GetBucketLocation",
                "s3:ListBucket",
                "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AmazonSageMakerFullAccess5",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "*",
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "s3:ExistingObjectTag/SageMaker": "true"
                }
            }
        },
        {
            "Sid": "AmazonSageMakerFullAccess6",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                }
            }
        },
        {
            "Sid": "AmazonSageMakerFullAccess7",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "sagemaker.amazonaws.com"
                }
            }
        },
        {
            "Sid": "AllowSupportForLimitIncrease",
            "Effect": "Allow",
            "Action": "support:*",
            "Resource": "*"
        }
    ]
}
